// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2018 16:32:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg [15:0] data_one;
reg [15:0] data_two;
reg [2:0] opr;
reg [3:0] shamt;
// wires                                               
wire equal;
wire [15:0] out;
wire overflow;
wire sign;
wire zero;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.cin(cin),
	.data_one(data_one),
	.data_two(data_two),
	.equal(equal),
	.opr(opr),
	.out(out),
	.overflow(overflow),
	.shamt(shamt),
	.sign(sign),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// cin
initial
begin
	cin = 1'b0;
end 
// data_one[ 15 ]
initial
begin
	data_one[15] = 1'b0;
end 
// data_one[ 14 ]
initial
begin
	data_one[14] = 1'b1;
	data_one[14] = #40000 1'b0;
end 
// data_one[ 13 ]
initial
begin
	data_one[13] = 1'b1;
	data_one[13] = #40000 1'b0;
end 
// data_one[ 12 ]
initial
begin
	data_one[12] = 1'b1;
	data_one[12] = #40000 1'b0;
end 
// data_one[ 11 ]
initial
begin
	data_one[11] = 1'b1;
	data_one[11] = #40000 1'b0;
end 
// data_one[ 10 ]
initial
begin
	data_one[10] = 1'b1;
	data_one[10] = #40000 1'b0;
end 
// data_one[ 9 ]
initial
begin
	data_one[9] = 1'b1;
	data_one[9] = #40000 1'b0;
end 
// data_one[ 8 ]
initial
begin
	data_one[8] = 1'b1;
	data_one[8] = #40000 1'b0;
end 
// data_one[ 7 ]
initial
begin
	data_one[7] = 1'b1;
	data_one[7] = #40000 1'b0;
end 
// data_one[ 6 ]
initial
begin
	data_one[6] = 1'b1;
	data_one[6] = #40000 1'b0;
end 
// data_one[ 5 ]
initial
begin
	data_one[5] = 1'b1;
	data_one[5] = #890000 1'b0;
end 
// data_one[ 4 ]
initial
begin
	data_one[4] = 1'b1;
	data_one[4] = #890000 1'b0;
end 
// data_one[ 3 ]
initial
begin
	data_one[3] = 1'b1;
	data_one[3] = #890000 1'b0;
end 
// data_one[ 2 ]
initial
begin
	data_one[2] = 1'b1;
	data_one[2] = #560000 1'b0;
	data_one[2] = #100000 1'b1;
	data_one[2] = #230000 1'b0;
end 
// data_one[ 1 ]
initial
begin
	data_one[1] = 1'b1;
	data_one[1] = #560000 1'b0;
	data_one[1] = #100000 1'b1;
	data_one[1] = #230000 1'b0;
end 
// data_one[ 0 ]
initial
begin
	data_one[0] = 1'b1;
	data_one[0] = #560000 1'b0;
	data_one[0] = #100000 1'b1;
	data_one[0] = #230000 1'b0;
end 
// data_two[ 15 ]
initial
begin
	data_two[15] = 1'b0;
end 
// data_two[ 14 ]
initial
begin
	data_two[14] = 1'b0;
end 
// data_two[ 13 ]
initial
begin
	data_two[13] = 1'b0;
end 
// data_two[ 12 ]
initial
begin
	data_two[12] = 1'b0;
end 
// data_two[ 11 ]
initial
begin
	data_two[11] = 1'b0;
end 
// data_two[ 10 ]
initial
begin
	data_two[10] = 1'b0;
end 
// data_two[ 9 ]
initial
begin
	data_two[9] = 1'b0;
end 
// data_two[ 8 ]
initial
begin
	data_two[8] = 1'b0;
end 
// data_two[ 7 ]
initial
begin
	data_two[7] = 1'b0;
end 
// data_two[ 6 ]
initial
begin
	data_two[6] = 1'b0;
end 
// data_two[ 5 ]
initial
begin
	data_two[5] = 1'b1;
	data_two[5] = #700000 1'b0;
end 
// data_two[ 4 ]
initial
begin
	data_two[4] = 1'b1;
	data_two[4] = #700000 1'b0;
end 
// data_two[ 3 ]
initial
begin
	data_two[3] = 1'b1;
	data_two[3] = #700000 1'b0;
end 
// data_two[ 2 ]
initial
begin
	data_two[2] = 1'b0;
end 
// data_two[ 1 ]
initial
begin
	data_two[1] = 1'b0;
end 
// data_two[ 0 ]
initial
begin
	data_two[0] = 1'b0;
end 
// opr[ 2 ]
initial
begin
	opr[2] = 1'b0;
	opr[2] = #340000 1'b1;
	opr[2] = #470000 1'b0;
end 
// opr[ 1 ]
initial
begin
	opr[1] = 1'b0;
	opr[1] = #130000 1'b1;
	opr[1] = #210000 1'b0;
	opr[1] = #220000 1'b1;
	opr[1] = #250000 1'b0;
end 
// opr[ 0 ]
initial
begin
	opr[0] = 1'b0;
	opr[0] = #60000 1'b1;
	opr[0] = #70000 1'b0;
	opr[0] = #110000 1'b1;
	opr[0] = #100000 1'b0;
	opr[0] = #110000 1'b1;
	opr[0] = #110000 1'b0;
	opr[0] = #100000 1'b1;
	opr[0] = #150000 1'b0;
end 
// shamt[ 3 ]
initial
begin
	shamt[3] = 1'b0;
end 
// shamt[ 2 ]
initial
begin
	shamt[2] = 1'b0;
	shamt[2] = #340000 1'b1;
	shamt[2] = #220000 1'b0;
end 
// shamt[ 1 ]
initial
begin
	shamt[1] = 1'b0;
end 
// shamt[ 0 ]
initial
begin
	shamt[0] = 1'b0;
	shamt[0] = #340000 1'b1;
	shamt[0] = #220000 1'b0;
end 
endmodule

