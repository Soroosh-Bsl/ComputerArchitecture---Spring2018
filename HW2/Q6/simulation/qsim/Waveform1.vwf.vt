// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2018 13:51:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          signal_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module signal_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] sel;
reg signal;
// wires                                               
wire O_five;
wire O_four;
wire O_one;
wire O_seven;
wire O_six;
wire O_three;
wire O_two;
wire O_zero;

// assign statements (if any)                          
signal_decoder i1 (
// port map - connection between master ports and signals/registers   
	.O_five(O_five),
	.O_four(O_four),
	.O_one(O_one),
	.O_seven(O_seven),
	.O_six(O_six),
	.O_three(O_three),
	.O_two(O_two),
	.O_zero(O_zero),
	.sel(sel),
	.signal(signal)
);
initial 
begin 
#1000000 $finish;
end 
// sel[ 2 ]
initial
begin
	repeat(12)
	begin
		sel[2] = 1'b0;
		sel[2] = #40000 1'b1;
		# 40000;
	end
	sel[2] = 1'b0;
end 
// sel[ 1 ]
always
begin
	sel[1] = 1'b0;
	sel[1] = #20000 1'b1;
	#20000;
end 
// sel[ 0 ]
always
begin
	sel[0] = 1'b0;
	sel[0] = #10000 1'b1;
	#10000;
end 

// signal
initial
begin
	signal = 1'b0;
	signal = #10000 1'b1;
	signal = #260000 1'b0;
	signal = #200000 1'b1;
	signal = #120000 1'b0;
end 
endmodule

